{"ast":null,"code":"import _slicedToArray from \"/home/mnoora/full-stack-2019/osa8/library-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/mnoora/full-stack-2019/osa8/library-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/mnoora/full-stack-2019/osa8/library-frontend/src/App.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  allBooks  {\\n    title\\n    author\\n    id\\n    published\\n  }\\n}\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  allAuthors  {\\n    name\\n    born\\n    id\\n    bookCount\\n  }\\n}\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport Authors from './components/Authors';\nimport Books from './components/Books';\nimport NewBook from './components/NewBook';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nconst ALL_AUTHORS = gql(_templateObject());\nconst ALL_BOOKS = gql(_templateObject2());\n\nconst App = () => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        errorMessage = _useState2[0],\n        setErrorMessage = _useState2[1];\n\n  const handleError = error => {\n    setErrorMessage(error.graphQLErrors[0].message);\n    setTimeout(() => {\n      setErrorMessage(null);\n    }, 10000);\n  };\n\n  const resultAuthors = useQuery(ALL_AUTHORS);\n  const resultBooks = useQuery(ALL_BOOKS);\n\n  const _useState3 = useState('authors'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        page = _useState4[0],\n        setPage = _useState4[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, errorMessage && React.createElement(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, errorMessage), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setPage('authors'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"authors\"), React.createElement(\"button\", {\n    onClick: () => setPage('books'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"books\"), React.createElement(\"button\", {\n    onClick: () => setPage('add'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"add book\")), React.createElement(Authors, {\n    show: page === 'authors',\n    result: resultAuthors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(Books, {\n    show: page === 'books',\n    result: resultBooks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(NewBook, {\n    show: page === 'add',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/mnoora/full-stack-2019/osa8/library-frontend/src/App.js"],"names":["React","useState","Authors","Books","NewBook","gql","useQuery","ALL_AUTHORS","ALL_BOOKS","App","errorMessage","setErrorMessage","handleError","error","graphQLErrors","message","setTimeout","resultAuthors","resultBooks","page","setPage","color"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,MAAMC,WAAW,GAAGF,GAAH,mBAAjB;AAWA,MAAMG,SAAS,GAAGH,GAAH,oBAAf;;AAWA,MAAMI,GAAG,GAAG,MAAM;AAAA,oBACwBR,QAAQ,CAAC,IAAD,CADhC;AAAA;AAAA,QACTS,YADS;AAAA,QACKC,eADL;;AAEhB,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7BF,IAAAA,eAAe,CAACE,KAAK,CAACC,aAAN,CAAoB,CAApB,EAAuBC,OAAxB,CAAf;AACAC,IAAAA,UAAU,CAAC,MAAM;AACfL,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KAFS,EAEP,KAFO,CAAV;AAGD,GALD;;AAMA,QAAMM,aAAa,GAAGX,QAAQ,CAACC,WAAD,CAA9B;AACA,QAAMW,WAAW,GAAGZ,QAAQ,CAACE,SAAD,CAA5B;;AATgB,qBAWQP,QAAQ,CAAC,SAAD,CAXhB;AAAA;AAAA,QAWTkB,IAXS;AAAA,QAWHC,OAXG;;AAahB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,YAAY,IACX;AAAK,IAAA,KAAK,EAAE;AAACW,MAAAA,KAAK,EAAE;AAAR,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,YADH,CAFJ,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAE,MAAMU,OAAO,CAAC,SAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAMA,OAAO,CAAC,OAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,EAGE;AAAQ,IAAA,OAAO,EAAE,MAAMA,OAAO,CAAC,KAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CANF,EAYE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAED,IAAI,KAAK,SADjB;AAC4B,IAAA,MAAM,EAAEF,aADpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAgBE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAEE,IAAI,KAAK,OADjB;AAC0B,IAAA,MAAM,EAAED,WADlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,EAoBE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAEC,IAAI,KAAK,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,CADF;AA2BD,CAxCD;;AA0CA,eAAeV,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport { gql } from 'apollo-boost'\nimport { useQuery } from '@apollo/react-hooks'\n\nconst ALL_AUTHORS = gql`\n{\n  allAuthors  {\n    name\n    born\n    id\n    bookCount\n  }\n}\n`\n\nconst ALL_BOOKS = gql`\n{\n  allBooks  {\n    title\n    author\n    id\n    published\n  }\n}\n`\n\nconst App = () => {\n  const [errorMessage, setErrorMessage] = useState(null)\n  const handleError = (error) => {\n    setErrorMessage(error.graphQLErrors[0].message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 10000)\n  }\n  const resultAuthors = useQuery(ALL_AUTHORS)\n  const resultBooks = useQuery(ALL_BOOKS)\n\n  const [page, setPage] = useState('authors')\n\n  return (\n    <div>\n      {errorMessage &&\n        <div style={{color: 'red'}}>\n          {errorMessage}\n        </div>\n      }\n      <div>\n        <button onClick={() => setPage('authors')}>authors</button>\n        <button onClick={() => setPage('books')}>books</button>\n        <button onClick={() => setPage('add')}>add book</button>\n      </div>\n\n      <Authors\n        show={page === 'authors'} result={resultAuthors}\n      />\n\n      <Books\n        show={page === 'books'} result={resultBooks}\n      />\n\n      <NewBook\n        show={page === 'add'}\n      />\n\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}